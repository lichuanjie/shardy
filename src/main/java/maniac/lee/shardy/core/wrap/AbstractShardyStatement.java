package maniac.lee.shardy.core.wrap;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by peng on 16/6/1.
 */
public abstract class AbstractShardyStatement extends WrapStatement {

    /**
     * statement的 8个属性
     */
    protected Connection connection;
    protected ResultSet generatedKey;
    protected ResultSet results;
    protected int resultSetConcurrency;
    protected int resultSetHoldability;
    protected int resultSetType;
    protected int updateCount;
    protected boolean closed = false;

    public abstract boolean doExecute(String sql, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames);

    public abstract int doExecuteUpdate(String sql, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames);


    @Override
    public boolean execute(String sql) throws SQLException {
        return doExecute(sql, -1, null, null);
    }


    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return doExecute(sql, autoGeneratedKeys, null, null);
    }


    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return doExecute(sql, -1, columnIndexes, null);
    }


    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return doExecute(sql, -1, null, columnNames);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return doExecuteUpdate(sql, -1, null, null);
    }


    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return doExecuteUpdate(sql, autoGeneratedKeys, null, null);
    }


    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return doExecuteUpdate(sql, -1, columnIndexes, null);
    }


    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return doExecuteUpdate(sql, -1, null, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return this.generatedKey;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return false;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return results;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return resultSetConcurrency;
    }


    @Override
    public int getResultSetHoldability() throws SQLException {
        return resultSetHoldability;
    }


    @Override
    public int getResultSetType() throws SQLException {
        return resultSetType;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return updateCount;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed;
    }

    protected void checkOpen() throws SQLException {
        if (closed) {
            throw new SQLException("No operations allowed after statement closed.");
        }
    }

    /**
     * ---------------以下是setter 方法
     */
    protected void setConnection(Connection connection) {
        this.connection = connection;
    }

    protected void setGeneratedKey(ResultSet generatedKey) {
        this.generatedKey = generatedKey;
    }

    protected void setResults(ResultSet results) {
        this.results = results;
    }

    protected void setResultSetConcurrency(int resultSetConcurrency) {
        this.resultSetConcurrency = resultSetConcurrency;
    }

    protected void setResultSetHoldability(int resultSetHoldability) {
        this.resultSetHoldability = resultSetHoldability;
    }

    protected void setResultSetType(int resultSetType) {
        this.resultSetType = resultSetType;
    }

    protected void setUpdateCount(int updateCount) {
        this.updateCount = updateCount;
    }

    protected void setClosed(boolean closed) {
        this.closed = closed;
    }
}
