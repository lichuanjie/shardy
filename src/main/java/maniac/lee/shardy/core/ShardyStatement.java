package maniac.lee.shardy.core;

import maniac.lee.shardy.core.wrap.WrapStatement;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * Created by peng on 16/6/1.
 */
public class ShardyStatement extends WrapStatement {

    /**
     * statement的 8个属性
     */
    private Connection connection;
    private ResultSet generatedKey;
    private ResultSet results;
    private int resultSetConcurrency;
    private int resultSetHoldability;
    private int resultSetType;
    private int updateCount;
    private boolean closed = false;

    private boolean _execute(String sql, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames) {
        return true;
    }

    private int _executeUpdate(String sql, int autoGeneratedKeys, int[] columnIndexes, String[] columnNames) {
        return updateCount;
    }


    @Override
    public boolean execute(String sql) throws SQLException {
        return _execute(sql, -1, null, null);
    }


    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return _execute(sql, autoGeneratedKeys, null, null);
    }


    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return _execute(sql, -1, columnIndexes, null);
    }


    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return _execute(sql, -1, null, columnNames);
    }

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        return super.executeQuery(sql);//TODO
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        return _executeUpdate(sql, -1, null, null);
    }


    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return _executeUpdate(sql, autoGeneratedKeys, null, null);
    }


    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return _executeUpdate(sql, -1, columnIndexes, null);
    }


    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return _executeUpdate(sql, -1, null, columnNames);
    }

    @Override
    public Connection getConnection() throws SQLException {
        return connection;
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return this.generatedKey;
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return false;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return results;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return resultSetConcurrency;
    }


    @Override
    public int getResultSetHoldability() throws SQLException {
        return resultSetHoldability;
    }


    @Override
    public int getResultSetType() throws SQLException {
        return resultSetType;
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return updateCount;
    }

    @Override
    public boolean isClosed() throws SQLException {
        return closed;
    }
}
